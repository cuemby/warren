{
  "permissions": {
    "allow": [
      "Bash(done)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\ndocs: create comprehensive Warren project documentation\n\n- Add Product Requirements Document (specs/prd.md)\n  - Define Warren as simple-yet-powerful orchestrator for edge\n  - Target: Swarm simplicity + K8s features - K8s complexity\n  - Single binary < 100MB, zero external dependencies\n  - Edge-first design with partition tolerance\n\n- Add Technical Specification (specs/tech.md)\n  - Go + Raft + containerd + WireGuard architecture\n  - Manager-worker distributed system design\n  - Detailed component design (scheduler, reconciler, networking)\n  - Security model (mTLS, secrets encryption)\n  - Deployment strategies (rolling, blue/green, canary)\n\n- Add Milestone Plan (tasks/todo.md)\n  - 6 milestones from Foundation to Open Source\n  - Milestone 0: POCs (Raft, containerd, WireGuard)\n  - Milestone 1-4: Core features, HA, deployment, observability\n  - Milestone 5: Public release and community building\n\n- Update Project Architecture (.agent/System/project-architecture.md)\n  - Replace template with Warren-specific architecture\n  - Document tech stack, components, data models\n  - Define APIs, CLI, integration points\n  - Include performance targets and testing strategy\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nchore: add .agent framework and development infrastructure\n\n- Add .agent/ documentation framework\n  - README with documentation index and workflow\n  - SOP/ directory with development procedures\n  - System/ principles and priority levels\n  - Tasks/ templates for planning\n\n- Add .claude/ custom slash commands\n  - /code, /test, /review, /refactor, /debug\n  - /prd, /tech-spec, /user-stories\n  - /update_docs, /aw, /document\n\n- Add CLAUDE.md with project-specific AI instructions\n  - Workflow: plan â†’ verify â†’ execute\n  - Reference prd.md and tech.md for context\n  - Keep .agent docs updated after features\n\n- Add Docker Swarm reference material (.agent/dockerswarm.txt)\n  - Research material for Warren design\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(chmod:*)",
      "Bash(git commit:*)",
      "Bash(go mod init:*)",
      "Bash(go get:*)",
      "Bash(make:*)",
      "Bash(./bin/warren:*)",
      "Bash(go install:*)",
      "Bash(protoc:*)",
      "Bash(go build:*)",
      "Bash(systemctl status:*)",
      "Bash(brew services:*)",
      "Bash(docker:*)",
      "Bash(limactl:*)",
      "Bash(./test/lima/setup.sh:*)",
      "Bash(./test/lima/test-cluster.sh:*)",
      "Bash(tee:*)",
      "Bash(git reset:*)",
      "Bash(time limactl shell:*)",
      "Bash(./test/lima/test-debug.sh:*)",
      "Bash(timeout:*)",
      "Bash(bash:*)",
      "Bash(./test/lima/test-debug2.sh:*)",
      "Bash(./test/lima/test-failover.sh:*)",
      "Bash(go test:*)",
      "Bash(git restore:*)",
      "Bash(go mod:*)",
      "Bash(awk:*)",
      "Bash(xargs:*)",
      "Bash(./test/lima/test-load.sh:*)",
      "Read(//private/tmp/**)",
      "Bash(cat:*)",
      "Bash(do limactl shell warren-manager-1 sudo /Users/ar4mirez/Developer/Work/cuemby/warren/bin/warren-linux-arm64 service delete \"load-test-$i\" --manager localhost:8080)",
      "Bash(git rm:*)",
      "Bash(gh:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(go list:*)",
      "Bash(./scripts/download-containerd.sh:*)",
      "Bash(/Users/ar4mirez/Developer/Work/cuemby/warren/bin/warren-linux-amd64:*)",
      "Bash(xxd:*)",
      "Bash(CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/warren-linux-amd64-test ./cmd/warren)",
      "Bash(./bin/warren-test:*)",
      "Bash(go doc:*)",
      "Bash(go run:*)",
      "Bash(brew:*)",
      "Read(//opt/homebrew/Cellar/lima/1.2.1/share/lima/**)",
      "Read(//Users/ar4mirez/.lima/warren/**)",
      "Read(///**)",
      "Bash(sudo:*)",
      "Bash(./warren:*)",
      "Bash(curl -s http://127.0.0.1:9090/metrics)",
      "Bash(pkill:*)",
      "Bash(./test/lima/test-mtls.sh:*)",
      "Bash(CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o bin/warren-linux-arm64 ./cmd/warren)",
      "Bash(./test/lima/test-ports.sh:*)",
      "Bash(stat:*)",
      "Bash(./test/lima/test-ingress.sh:*)",
      "Bash(./test/lima/test-ingress-simple.sh:*)",
      "Bash(GIT_AUTHOR_NAME=\"Claude\" GIT_AUTHOR_EMAIL=\"noreply@anthropic.com\" GIT_COMMITTER_NAME=\"Claude\" GIT_COMMITTER_EMAIL=\"noreply@anthropic.com\" git commit:*)",
      "Bash(./test/lima/test-https.sh:*)",
      "Bash(./test/lima/test-advanced-routing.sh:*)",
      "Bash(git tag:*)",
      "Bash(git log:*)",
      "Bash(git ls-tree:*)",
      "Bash(bfg:*)",
      "Bash(git reflog:*)",
      "Bash(git gc:*)",
      "Bash(/usr/bin/du:*)",
      "Bash(bin/warren-linux-amd64:*)",
      "Bash(bin/warren-linux-arm64:*)",
      "Bash(bin/warren-darwin-amd64:*)",
      "Bash(bin/warren-darwin-arm64:*)",
      "Bash(golangci-lint run:*)",
      "Bash(go version)",
      "Bash(GOTOOLCHAIN=local go test:*)",
      "Bash(GOTOOLCHAIN=local go mod:*)",
      "Bash(git mv:*)",
      "Bash(do git mv test/lima/$f test/lima-legacy/$f)"
    ],
    "deny": [],
    "ask": []
  }
}
