// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/warren.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WarrenAPI_RegisterNode_FullMethodName       = "/warren.v1.WarrenAPI/RegisterNode"
	WarrenAPI_Heartbeat_FullMethodName          = "/warren.v1.WarrenAPI/Heartbeat"
	WarrenAPI_ListNodes_FullMethodName          = "/warren.v1.WarrenAPI/ListNodes"
	WarrenAPI_GetNode_FullMethodName            = "/warren.v1.WarrenAPI/GetNode"
	WarrenAPI_RemoveNode_FullMethodName         = "/warren.v1.WarrenAPI/RemoveNode"
	WarrenAPI_CreateService_FullMethodName      = "/warren.v1.WarrenAPI/CreateService"
	WarrenAPI_UpdateService_FullMethodName      = "/warren.v1.WarrenAPI/UpdateService"
	WarrenAPI_DeleteService_FullMethodName      = "/warren.v1.WarrenAPI/DeleteService"
	WarrenAPI_GetService_FullMethodName         = "/warren.v1.WarrenAPI/GetService"
	WarrenAPI_ListServices_FullMethodName       = "/warren.v1.WarrenAPI/ListServices"
	WarrenAPI_UpdateTaskStatus_FullMethodName   = "/warren.v1.WarrenAPI/UpdateTaskStatus"
	WarrenAPI_ListTasks_FullMethodName          = "/warren.v1.WarrenAPI/ListTasks"
	WarrenAPI_GetTask_FullMethodName            = "/warren.v1.WarrenAPI/GetTask"
	WarrenAPI_WatchTasks_FullMethodName         = "/warren.v1.WarrenAPI/WatchTasks"
	WarrenAPI_ReportTaskHealth_FullMethodName   = "/warren.v1.WarrenAPI/ReportTaskHealth"
	WarrenAPI_CreateSecret_FullMethodName       = "/warren.v1.WarrenAPI/CreateSecret"
	WarrenAPI_GetSecretByName_FullMethodName    = "/warren.v1.WarrenAPI/GetSecretByName"
	WarrenAPI_DeleteSecret_FullMethodName       = "/warren.v1.WarrenAPI/DeleteSecret"
	WarrenAPI_ListSecrets_FullMethodName        = "/warren.v1.WarrenAPI/ListSecrets"
	WarrenAPI_CreateVolume_FullMethodName       = "/warren.v1.WarrenAPI/CreateVolume"
	WarrenAPI_GetVolumeByName_FullMethodName    = "/warren.v1.WarrenAPI/GetVolumeByName"
	WarrenAPI_DeleteVolume_FullMethodName       = "/warren.v1.WarrenAPI/DeleteVolume"
	WarrenAPI_ListVolumes_FullMethodName        = "/warren.v1.WarrenAPI/ListVolumes"
	WarrenAPI_GenerateJoinToken_FullMethodName  = "/warren.v1.WarrenAPI/GenerateJoinToken"
	WarrenAPI_JoinCluster_FullMethodName        = "/warren.v1.WarrenAPI/JoinCluster"
	WarrenAPI_GetClusterInfo_FullMethodName     = "/warren.v1.WarrenAPI/GetClusterInfo"
	WarrenAPI_RequestCertificate_FullMethodName = "/warren.v1.WarrenAPI/RequestCertificate"
	WarrenAPI_CreateIngress_FullMethodName      = "/warren.v1.WarrenAPI/CreateIngress"
	WarrenAPI_UpdateIngress_FullMethodName      = "/warren.v1.WarrenAPI/UpdateIngress"
	WarrenAPI_DeleteIngress_FullMethodName      = "/warren.v1.WarrenAPI/DeleteIngress"
	WarrenAPI_GetIngress_FullMethodName         = "/warren.v1.WarrenAPI/GetIngress"
	WarrenAPI_ListIngresses_FullMethodName      = "/warren.v1.WarrenAPI/ListIngresses"
	WarrenAPI_StreamEvents_FullMethodName       = "/warren.v1.WarrenAPI/StreamEvents"
)

// WarrenAPIClient is the client API for WarrenAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WarrenAPI defines the manager API for workers and CLI
type WarrenAPIClient interface {
	// Node operations
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeResponse, error)
	// Service operations
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// Task operations
	UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*UpdateTaskStatusResponse, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// Task assignment stream (worker watches for assigned tasks)
	WatchTasks(ctx context.Context, in *WatchTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskEvent], error)
	// Health check operations
	ReportTaskHealth(ctx context.Context, in *ReportTaskHealthRequest, opts ...grpc.CallOption) (*ReportTaskHealthResponse, error)
	// Secret operations
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	GetSecretByName(ctx context.Context, in *GetSecretByNameRequest, opts ...grpc.CallOption) (*GetSecretByNameResponse, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
	// Volume operations
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error)
	GetVolumeByName(ctx context.Context, in *GetVolumeByNameRequest, opts ...grpc.CallOption) (*GetVolumeByNameResponse, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
	ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error)
	// Cluster operations
	GenerateJoinToken(ctx context.Context, in *GenerateJoinTokenRequest, opts ...grpc.CallOption) (*GenerateJoinTokenResponse, error)
	JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*JoinClusterResponse, error)
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error)
	// Certificate operations
	RequestCertificate(ctx context.Context, in *RequestCertificateRequest, opts ...grpc.CallOption) (*RequestCertificateResponse, error)
	// Ingress operations
	CreateIngress(ctx context.Context, in *CreateIngressRequest, opts ...grpc.CallOption) (*CreateIngressResponse, error)
	UpdateIngress(ctx context.Context, in *UpdateIngressRequest, opts ...grpc.CallOption) (*UpdateIngressResponse, error)
	DeleteIngress(ctx context.Context, in *DeleteIngressRequest, opts ...grpc.CallOption) (*DeleteIngressResponse, error)
	GetIngress(ctx context.Context, in *GetIngressRequest, opts ...grpc.CallOption) (*GetIngressResponse, error)
	ListIngresses(ctx context.Context, in *ListIngressesRequest, opts ...grpc.CallOption) (*ListIngressesResponse, error)
	// Event streaming
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
}

type warrenAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWarrenAPIClient(cc grpc.ClientConnInterface) WarrenAPIClient {
	return &warrenAPIClient{cc}
}

func (c *warrenAPIClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_RegisterNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNodeResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_RemoveNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_CreateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServiceResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_UpdateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteServiceResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_DeleteService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_GetService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*UpdateTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskStatusResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_UpdateTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) WatchTasks(ctx context.Context, in *WatchTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WarrenAPI_ServiceDesc.Streams[0], WarrenAPI_WatchTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchTasksRequest, TaskEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WarrenAPI_WatchTasksClient = grpc.ServerStreamingClient[TaskEvent]

func (c *warrenAPIClient) ReportTaskHealth(ctx context.Context, in *ReportTaskHealthRequest, opts ...grpc.CallOption) (*ReportTaskHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportTaskHealthResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_ReportTaskHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_CreateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) GetSecretByName(ctx context.Context, in *GetSecretByNameRequest, opts ...grpc.CallOption) (*GetSecretByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretByNameResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_GetSecretByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretsResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_ListSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVolumeResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_CreateVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) GetVolumeByName(ctx context.Context, in *GetVolumeByNameRequest, opts ...grpc.CallOption) (*GetVolumeByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVolumeByNameResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_GetVolumeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVolumeResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_DeleteVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVolumesResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_ListVolumes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) GenerateJoinToken(ctx context.Context, in *GenerateJoinTokenRequest, opts ...grpc.CallOption) (*GenerateJoinTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateJoinTokenResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_GenerateJoinToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*JoinClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinClusterResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_JoinCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_GetClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) RequestCertificate(ctx context.Context, in *RequestCertificateRequest, opts ...grpc.CallOption) (*RequestCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestCertificateResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_RequestCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) CreateIngress(ctx context.Context, in *CreateIngressRequest, opts ...grpc.CallOption) (*CreateIngressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIngressResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_CreateIngress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) UpdateIngress(ctx context.Context, in *UpdateIngressRequest, opts ...grpc.CallOption) (*UpdateIngressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIngressResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_UpdateIngress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) DeleteIngress(ctx context.Context, in *DeleteIngressRequest, opts ...grpc.CallOption) (*DeleteIngressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIngressResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_DeleteIngress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) GetIngress(ctx context.Context, in *GetIngressRequest, opts ...grpc.CallOption) (*GetIngressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIngressResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_GetIngress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) ListIngresses(ctx context.Context, in *ListIngressesRequest, opts ...grpc.CallOption) (*ListIngressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIngressesResponse)
	err := c.cc.Invoke(ctx, WarrenAPI_ListIngresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warrenAPIClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WarrenAPI_ServiceDesc.Streams[1], WarrenAPI_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WarrenAPI_StreamEventsClient = grpc.ServerStreamingClient[Event]

// WarrenAPIServer is the server API for WarrenAPI service.
// All implementations must embed UnimplementedWarrenAPIServer
// for forward compatibility.
//
// WarrenAPI defines the manager API for workers and CLI
type WarrenAPIServer interface {
	// Node operations
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	RemoveNode(context.Context, *RemoveNodeRequest) (*RemoveNodeResponse, error)
	// Service operations
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error)
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// Task operations
	UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*UpdateTaskStatusResponse, error)
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	// Task assignment stream (worker watches for assigned tasks)
	WatchTasks(*WatchTasksRequest, grpc.ServerStreamingServer[TaskEvent]) error
	// Health check operations
	ReportTaskHealth(context.Context, *ReportTaskHealthRequest) (*ReportTaskHealthResponse, error)
	// Secret operations
	CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	GetSecretByName(context.Context, *GetSecretByNameRequest) (*GetSecretByNameResponse, error)
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	// Volume operations
	CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error)
	GetVolumeByName(context.Context, *GetVolumeByNameRequest) (*GetVolumeByNameResponse, error)
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error)
	// Cluster operations
	GenerateJoinToken(context.Context, *GenerateJoinTokenRequest) (*GenerateJoinTokenResponse, error)
	JoinCluster(context.Context, *JoinClusterRequest) (*JoinClusterResponse, error)
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error)
	// Certificate operations
	RequestCertificate(context.Context, *RequestCertificateRequest) (*RequestCertificateResponse, error)
	// Ingress operations
	CreateIngress(context.Context, *CreateIngressRequest) (*CreateIngressResponse, error)
	UpdateIngress(context.Context, *UpdateIngressRequest) (*UpdateIngressResponse, error)
	DeleteIngress(context.Context, *DeleteIngressRequest) (*DeleteIngressResponse, error)
	GetIngress(context.Context, *GetIngressRequest) (*GetIngressResponse, error)
	ListIngresses(context.Context, *ListIngressesRequest) (*ListIngressesResponse, error)
	// Event streaming
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[Event]) error
	mustEmbedUnimplementedWarrenAPIServer()
}

// UnimplementedWarrenAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWarrenAPIServer struct{}

func (UnimplementedWarrenAPIServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedWarrenAPIServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedWarrenAPIServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedWarrenAPIServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedWarrenAPIServer) RemoveNode(context.Context, *RemoveNodeRequest) (*RemoveNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedWarrenAPIServer) CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedWarrenAPIServer) UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedWarrenAPIServer) DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedWarrenAPIServer) GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedWarrenAPIServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedWarrenAPIServer) UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*UpdateTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedWarrenAPIServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedWarrenAPIServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedWarrenAPIServer) WatchTasks(*WatchTasksRequest, grpc.ServerStreamingServer[TaskEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchTasks not implemented")
}
func (UnimplementedWarrenAPIServer) ReportTaskHealth(context.Context, *ReportTaskHealthRequest) (*ReportTaskHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskHealth not implemented")
}
func (UnimplementedWarrenAPIServer) CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedWarrenAPIServer) GetSecretByName(context.Context, *GetSecretByNameRequest) (*GetSecretByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretByName not implemented")
}
func (UnimplementedWarrenAPIServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedWarrenAPIServer) ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedWarrenAPIServer) CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedWarrenAPIServer) GetVolumeByName(context.Context, *GetVolumeByNameRequest) (*GetVolumeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeByName not implemented")
}
func (UnimplementedWarrenAPIServer) DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedWarrenAPIServer) ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (UnimplementedWarrenAPIServer) GenerateJoinToken(context.Context, *GenerateJoinTokenRequest) (*GenerateJoinTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateJoinToken not implemented")
}
func (UnimplementedWarrenAPIServer) JoinCluster(context.Context, *JoinClusterRequest) (*JoinClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (UnimplementedWarrenAPIServer) GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedWarrenAPIServer) RequestCertificate(context.Context, *RequestCertificateRequest) (*RequestCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCertificate not implemented")
}
func (UnimplementedWarrenAPIServer) CreateIngress(context.Context, *CreateIngressRequest) (*CreateIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngress not implemented")
}
func (UnimplementedWarrenAPIServer) UpdateIngress(context.Context, *UpdateIngressRequest) (*UpdateIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngress not implemented")
}
func (UnimplementedWarrenAPIServer) DeleteIngress(context.Context, *DeleteIngressRequest) (*DeleteIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIngress not implemented")
}
func (UnimplementedWarrenAPIServer) GetIngress(context.Context, *GetIngressRequest) (*GetIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngress not implemented")
}
func (UnimplementedWarrenAPIServer) ListIngresses(context.Context, *ListIngressesRequest) (*ListIngressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIngresses not implemented")
}
func (UnimplementedWarrenAPIServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedWarrenAPIServer) mustEmbedUnimplementedWarrenAPIServer() {}
func (UnimplementedWarrenAPIServer) testEmbeddedByValue()                   {}

// UnsafeWarrenAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarrenAPIServer will
// result in compilation errors.
type UnsafeWarrenAPIServer interface {
	mustEmbedUnimplementedWarrenAPIServer()
}

func RegisterWarrenAPIServer(s grpc.ServiceRegistrar, srv WarrenAPIServer) {
	// If the following call pancis, it indicates UnimplementedWarrenAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WarrenAPI_ServiceDesc, srv)
}

func _WarrenAPI_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_RegisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_RemoveNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).RemoveNode(ctx, req.(*RemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).UpdateTaskStatus(ctx, req.(*UpdateTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_WatchTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WarrenAPIServer).WatchTasks(m, &grpc.GenericServerStream[WatchTasksRequest, TaskEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WarrenAPI_WatchTasksServer = grpc.ServerStreamingServer[TaskEvent]

func _WarrenAPI_ReportTaskHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).ReportTaskHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_ReportTaskHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).ReportTaskHealth(ctx, req.(*ReportTaskHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_GetSecretByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).GetSecretByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_GetSecretByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).GetSecretByName(ctx, req.(*GetSecretByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).ListSecrets(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_CreateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_GetVolumeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).GetVolumeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_GetVolumeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).GetVolumeByName(ctx, req.(*GetVolumeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_DeleteVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_ListVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).ListVolumes(ctx, req.(*ListVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_GenerateJoinToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateJoinTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).GenerateJoinToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_GenerateJoinToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).GenerateJoinToken(ctx, req.(*GenerateJoinTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_JoinCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).JoinCluster(ctx, req.(*JoinClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_RequestCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).RequestCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_RequestCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).RequestCertificate(ctx, req.(*RequestCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_CreateIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).CreateIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_CreateIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).CreateIngress(ctx, req.(*CreateIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_UpdateIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).UpdateIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_UpdateIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).UpdateIngress(ctx, req.(*UpdateIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_DeleteIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).DeleteIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_DeleteIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).DeleteIngress(ctx, req.(*DeleteIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_GetIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).GetIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_GetIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).GetIngress(ctx, req.(*GetIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_ListIngresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIngressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarrenAPIServer).ListIngresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarrenAPI_ListIngresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarrenAPIServer).ListIngresses(ctx, req.(*ListIngressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarrenAPI_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WarrenAPIServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WarrenAPI_StreamEventsServer = grpc.ServerStreamingServer[Event]

// WarrenAPI_ServiceDesc is the grpc.ServiceDesc for WarrenAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarrenAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warren.v1.WarrenAPI",
	HandlerType: (*WarrenAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _WarrenAPI_RegisterNode_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _WarrenAPI_Heartbeat_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _WarrenAPI_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _WarrenAPI_GetNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _WarrenAPI_RemoveNode_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _WarrenAPI_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _WarrenAPI_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _WarrenAPI_DeleteService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _WarrenAPI_GetService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _WarrenAPI_ListServices_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _WarrenAPI_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _WarrenAPI_ListTasks_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _WarrenAPI_GetTask_Handler,
		},
		{
			MethodName: "ReportTaskHealth",
			Handler:    _WarrenAPI_ReportTaskHealth_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _WarrenAPI_CreateSecret_Handler,
		},
		{
			MethodName: "GetSecretByName",
			Handler:    _WarrenAPI_GetSecretByName_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _WarrenAPI_DeleteSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _WarrenAPI_ListSecrets_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _WarrenAPI_CreateVolume_Handler,
		},
		{
			MethodName: "GetVolumeByName",
			Handler:    _WarrenAPI_GetVolumeByName_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _WarrenAPI_DeleteVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _WarrenAPI_ListVolumes_Handler,
		},
		{
			MethodName: "GenerateJoinToken",
			Handler:    _WarrenAPI_GenerateJoinToken_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _WarrenAPI_JoinCluster_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _WarrenAPI_GetClusterInfo_Handler,
		},
		{
			MethodName: "RequestCertificate",
			Handler:    _WarrenAPI_RequestCertificate_Handler,
		},
		{
			MethodName: "CreateIngress",
			Handler:    _WarrenAPI_CreateIngress_Handler,
		},
		{
			MethodName: "UpdateIngress",
			Handler:    _WarrenAPI_UpdateIngress_Handler,
		},
		{
			MethodName: "DeleteIngress",
			Handler:    _WarrenAPI_DeleteIngress_Handler,
		},
		{
			MethodName: "GetIngress",
			Handler:    _WarrenAPI_GetIngress_Handler,
		},
		{
			MethodName: "ListIngresses",
			Handler:    _WarrenAPI_ListIngresses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTasks",
			Handler:       _WarrenAPI_WatchTasks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _WarrenAPI_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/warren.proto",
}
