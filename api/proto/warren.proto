syntax = "proto3";

package warren.v1;

option go_package = "github.com/cuemby/warren/api/proto";

import "google/protobuf/timestamp.proto";

// WarrenAPI defines the manager API for workers and CLI
service WarrenAPI {
  // Node operations
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse);
  rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
  rpc RemoveNode(RemoveNodeRequest) returns (RemoveNodeResponse);

  // Service operations
  rpc CreateService(CreateServiceRequest) returns (CreateServiceResponse);
  rpc UpdateService(UpdateServiceRequest) returns (UpdateServiceResponse);
  rpc DeleteService(DeleteServiceRequest) returns (DeleteServiceResponse);
  rpc GetService(GetServiceRequest) returns (GetServiceResponse);
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse);

  // Task operations
  rpc UpdateTaskStatus(UpdateTaskStatusRequest) returns (UpdateTaskStatusResponse);
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse);

  // Task assignment stream (worker watches for assigned tasks)
  rpc WatchTasks(WatchTasksRequest) returns (stream TaskEvent);

  // Health check operations
  rpc ReportTaskHealth(ReportTaskHealthRequest) returns (ReportTaskHealthResponse);

  // Secret operations
  rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse);
  rpc GetSecretByName(GetSecretByNameRequest) returns (GetSecretByNameResponse);
  rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse);
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse);

  // Volume operations
  rpc CreateVolume(CreateVolumeRequest) returns (CreateVolumeResponse);
  rpc GetVolumeByName(GetVolumeByNameRequest) returns (GetVolumeByNameResponse);
  rpc DeleteVolume(DeleteVolumeRequest) returns (DeleteVolumeResponse);
  rpc ListVolumes(ListVolumesRequest) returns (ListVolumesResponse);

  // Cluster operations
  rpc GenerateJoinToken(GenerateJoinTokenRequest) returns (GenerateJoinTokenResponse);
  rpc JoinCluster(JoinClusterRequest) returns (JoinClusterResponse);
  rpc GetClusterInfo(GetClusterInfoRequest) returns (GetClusterInfoResponse);

  // Certificate operations
  rpc RequestCertificate(RequestCertificateRequest) returns (RequestCertificateResponse);

  // Event streaming
  rpc StreamEvents(StreamEventsRequest) returns (stream Event);
}

// Node messages
message Node {
  string id = 1;
  string role = 2; // "manager" or "worker"
  string address = 3;
  string overlay_ip = 4;
  NodeResources resources = 5;
  string status = 6; // "ready", "down", "unknown"
  google.protobuf.Timestamp last_heartbeat = 7;
  google.protobuf.Timestamp created_at = 8;
  map<string, string> labels = 9;
}

message NodeResources {
  int64 cpu_cores = 1;
  int64 memory_bytes = 2;
  int64 disk_bytes = 3;
}

message RegisterNodeRequest {
  string id = 1;
  string role = 2;
  string address = 3;
  NodeResources resources = 4;
  map<string, string> labels = 5;
}

message RegisterNodeResponse {
  Node node = 1;
  string overlay_ip = 2;
}

message HeartbeatRequest {
  string node_id = 1;
  NodeResources available_resources = 2;
  repeated TaskStatus task_statuses = 3;
}

message HeartbeatResponse {
  string status = 1;
}

message TaskStatus {
  string task_id = 1;
  string actual_state = 2; // "running", "failed", "stopped"
  string container_id = 3;
  string error = 4;
}

message ListNodesRequest {
  string role_filter = 1; // optional: "manager" or "worker"
}

message ListNodesResponse {
  repeated Node nodes = 1;
}

message GetNodeRequest {
  string id = 1;
}

message GetNodeResponse {
  Node node = 1;
}

message RemoveNodeRequest {
  string id = 1;
}

message RemoveNodeResponse {
  string status = 1;
}

// Service messages
message Service {
  string id = 1;
  string name = 2;
  string image = 3;
  int32 replicas = 4;
  string mode = 5; // "replicated" or "global"
  string deploy_strategy = 6; // "rolling", "blue-green", "canary"
  UpdateConfig update_config = 7;
  HealthCheck health_check = 8;
  RestartPolicy restart_policy = 9;
  ResourceRequirements resources = 10;
  repeated string networks = 11;
  repeated VolumeMount volumes = 12;
  map<string, string> env = 13;
  repeated string command = 14;
  google.protobuf.Timestamp created_at = 15;
  google.protobuf.Timestamp updated_at = 16;
  repeated PortMapping ports = 17; // Published ports
  int32 stop_timeout = 18; // Seconds to wait before force-killing (default: 10)
}

message UpdateConfig {
  int32 parallelism = 1;
  int32 delay_seconds = 2;
  string failure_action = 3; // "pause", "continue", "rollback"
}

message HealthCheck {
  // Type of health check
  enum Type {
    HTTP = 0;
    TCP = 1;
    EXEC = 2;
  }

  Type type = 1;

  // Type-specific configurations
  HTTPHealthCheck http = 2;
  TCPHealthCheck tcp = 3;
  ExecHealthCheck exec = 4;

  // Common configuration
  int32 interval_seconds = 5;      // Time between checks (default: 30s)
  int32 timeout_seconds = 6;       // Check timeout (default: 10s)
  int32 retries = 7;               // Failures before unhealthy (default: 3)
  int32 start_period_seconds = 8;  // Grace period for startup (default: 0s)
}

message HTTPHealthCheck {
  string path = 1;              // HTTP path (e.g., "/health")
  int32 port = 2;               // Container port
  string scheme = 3;            // "http" or "https" (default: "http")
  repeated Header headers = 4;  // Custom headers
  int32 status_code_min = 5;    // Min acceptable status (default: 200)
  int32 status_code_max = 6;    // Max acceptable status (default: 399)
}

message Header {
  string key = 1;
  string value = 2;
}

message TCPHealthCheck {
  int32 port = 1;  // Container port to check
}

message ExecHealthCheck {
  repeated string command = 1;  // Command to execute (e.g., ["pg_isready"])
}

message RestartPolicy {
  string condition = 1; // "none", "on-failure", "any"
  int32 max_attempts = 2;
  int32 delay_seconds = 3;
}

message ResourceRequirements {
  int64 cpu_shares = 1;
  int64 memory_bytes = 2;
  int64 memory_reservation_bytes = 3;
}

message VolumeMount {
  string source = 1;
  string target = 2;
  bool read_only = 3;
}

message PortMapping {
  enum PublishMode {
    HOST = 0;     // Publish on node running the task
    INGRESS = 1;  // Publish on all nodes with routing mesh
  }

  string name = 1;           // Optional port name
  int32 container_port = 2;  // Port inside container (target)
  int32 host_port = 3;       // Port on host/cluster (published)
  string protocol = 4;       // "tcp" or "udp" (default: "tcp")
  PublishMode publish_mode = 5; // Publishing mode (default: HOST)
}

message CreateServiceRequest {
  string name = 1;
  string image = 2;
  int32 replicas = 3;
  string mode = 4;
  string deploy_strategy = 5;
  UpdateConfig update_config = 6;
  HealthCheck health_check = 7;
  RestartPolicy restart_policy = 8;
  ResourceRequirements resources = 9;
  repeated string networks = 10;
  repeated VolumeMount volumes = 11;
  map<string, string> env = 12;
  repeated string command = 13;
  repeated PortMapping ports = 14; // Published ports
  int32 stop_timeout = 15; // Seconds to wait before force-killing (default: 10)
}

message CreateServiceResponse {
  Service service = 1;
}

message UpdateServiceRequest {
  string id = 1;
  int32 replicas = 2;
  string image = 3;
  map<string, string> env = 4;
}

message UpdateServiceResponse {
  Service service = 1;
}

message DeleteServiceRequest {
  string id = 1;
}

message DeleteServiceResponse {
  string status = 1;
}

message GetServiceRequest {
  string id = 1;
  string name = 2; // can query by name or id
}

message GetServiceResponse {
  Service service = 1;
}

message ListServicesRequest {}

message ListServicesResponse {
  repeated Service services = 1;
}

// Task messages
message Task {
  string id = 1;
  string service_id = 2;
  string service_name = 3;
  string node_id = 4;
  string container_id = 5;
  string desired_state = 6; // "running", "shutdown"
  string actual_state = 7; // "pending", "running", "failed", "stopped"
  string image = 8;
  repeated string command = 9;
  map<string, string> env = 10;
  ResourceRequirements resources = 11;
  repeated VolumeMount volumes = 12;
  HealthCheck health_check = 13;
  RestartPolicy restart_policy = 14;
  google.protobuf.Timestamp created_at = 15;
  google.protobuf.Timestamp updated_at = 16;
  string error = 17;
  repeated string secrets = 18; // Secret names to mount
  int32 stop_timeout = 19; // Seconds to wait before force-killing (default: 10)
}

message UpdateTaskStatusRequest {
  string task_id = 1;
  string node_id = 2;
  string actual_state = 3;
  string container_id = 4;
  string error = 5;
}

message UpdateTaskStatusResponse {
  string status = 1;
}

message ListTasksRequest {
  string service_id = 1; // optional filter
  string node_id = 2; // optional filter
}

message ListTasksResponse {
  repeated Task tasks = 1;
}

message GetTaskRequest {
  string id = 1;
}

message GetTaskResponse {
  Task task = 1;
}

message WatchTasksRequest {
  string node_id = 1;
}

message TaskEvent {
  string type = 1; // "add", "update", "delete"
  Task task = 2;
}

// Secret messages
message Secret {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp created_at = 3;
  bytes data = 4; // Encrypted data (only included in worker retrieval)
}

message CreateSecretRequest {
  string name = 1;
  bytes data = 2;
}

message CreateSecretResponse {
  Secret secret = 1;
}

message DeleteSecretRequest {
  string id = 1;
}

message DeleteSecretResponse {
  string status = 1;
}

message GetSecretByNameRequest {
  string name = 1;
}

message GetSecretByNameResponse {
  Secret secret = 1;
}

message ListSecretsRequest {}

message ListSecretsResponse {
  repeated Secret secrets = 1;
}

// Volume messages
message Volume {
  string id = 1;
  string name = 2;
  string driver = 3;
  map<string, string> driver_opts = 4;
  map<string, string> labels = 5;
  google.protobuf.Timestamp created_at = 6;
  string node_id = 7; // Node affinity for local volumes
  string mount_path = 8; // Host mount path
}

message CreateVolumeRequest {
  string name = 1;
  string driver = 2;
  map<string, string> driver_opts = 3;
  map<string, string> labels = 4;
}

message CreateVolumeResponse {
  Volume volume = 1;
}

message DeleteVolumeRequest {
  string id = 1;
}

message DeleteVolumeResponse {
  string status = 1;
}

message GetVolumeByNameRequest {
  string name = 1;
}

message GetVolumeByNameResponse {
  Volume volume = 1;
}

message ListVolumesRequest {}

message ListVolumesResponse {
  repeated Volume volumes = 1;
}

// Cluster messages
message GenerateJoinTokenRequest {
  string role = 1; // "manager" or "worker"
}

message GenerateJoinTokenResponse {
  string token = 1;
  string role = 2;
  google.protobuf.Timestamp expires_at = 3;
}

message JoinClusterRequest {
  string node_id = 1;
  string bind_addr = 2;
  string token = 3;
}

message JoinClusterResponse {
  string status = 1;
  string leader_addr = 2;
}

message GetClusterInfoRequest {}

message GetClusterInfoResponse {
  string leader_id = 1;
  string leader_addr = 2;
  repeated ClusterServer servers = 3;
}

message ClusterServer {
  string id = 1;
  string address = 2;
  string suffrage = 3; // "Voter", "Nonvoter", "Staging"
}

// Health check messages
message ReportTaskHealthRequest {
  string task_id = 1;
  bool healthy = 2;
  string message = 3;
  google.protobuf.Timestamp checked_at = 4;
  int32 consecutive_failures = 5;
  int32 consecutive_successes = 6;
}

message ReportTaskHealthResponse {
  string status = 1;
}

// Event streaming messages
message Event {
  string id = 1;
  string type = 2;
  google.protobuf.Timestamp timestamp = 3;
  string message = 4;
  map<string, string> metadata = 5;
}

message StreamEventsRequest {
  repeated string event_types = 1; // Filter by event types (empty = all events)
}

// Certificate messages
message RequestCertificateRequest {
  string node_id = 1;
  string token = 2;
}

message RequestCertificateResponse {
  bytes certificate = 1;
  bytes private_key = 2;
  bytes ca_cert = 3;
}
