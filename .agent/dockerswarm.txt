Docker Swarm operates on a simple and lightweight manager-worker architecture that transforms a cluster of Docker hosts into a single virtual Docker host. At its core, the architecture consists of two main types of nodes, with a key algorithm for maintaining cluster consistency. 
Key components
Manager nodes: These act as the "brain" of the Swarm.
They handle all orchestration and cluster management functions, including scheduling services and maintaining the desired state of the cluster.
In a multi-manager setup, they use the Raft consensus algorithm to ensure all managers have an identical and consistent record of the cluster's state.
One manager is elected as the "leader" to make all scheduling and orchestration decisions. If the leader fails, the other managers elect a new one.
For high availability, Docker recommends an odd number of managers (e.g., 3, 5, or 7) to ensure a quorum can be maintained in case of failure.
Worker nodes: These nodes receive and execute tasks from the manager nodes.
They do not participate in scheduling decisions or contribute to the Raft consensus.
Worker nodes run the container workloads and report their status back to the managers.
Services: This is how you define a running application in Docker Swarm. A service specifies which container image to use, the commands to execute, and the desired number of replicas.
Replicated services: Run a specified number of identical tasks (containers) across the worker nodes.
Global services: Run one task on every available node in the cluster, which is useful for logging or monitoring agents.
Tasks: An individual task is a running container that is part of a service. A manager node assigns a task to a worker node, and once assigned, the task cannot be moved. 
Networking and load balancing
Overlay network: This network is automatically created to facilitate communication between containers across different nodes, making them behave as if they are on the same machine.
Routing mesh: An ingress load balancer is built into every node. It allows any node in the cluster to accept connections on published ports for any service, even if the service is not running on that particular node. The routing mesh then forwards the request to a healthy, running task.
Internal DNS: A built-in DNS component automatically assigns a DNS entry to each service. This is used by the internal load balancer to distribute requests among service tasks. 
How it works
Initialize the Swarm: A user runs docker swarm init on a host to create the first manager node and form a new cluster.
Join the nodes: Other machines join the cluster as either manager or worker nodes using a secure token generated by an existing manager.
Define a service: The user creates a service by defining its desired state, such as the container image and the number of replicas.
Scheduling: A manager node schedules tasks (containers) onto the available worker nodes to match the desired state of the service.
Reconciliation: If a worker node fails, the manager uses the Raft consensus to recognize the failure and reschedules the failed tasks onto other healthy nodes. The system continuously works to reconcile the actual state with the desired state.