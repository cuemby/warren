# examples/secrets-volumes.yaml
#
# Secrets and Volumes Example
#
# This example demonstrates secure secrets management and persistent
# storage in Warren. Secrets are encrypted with AES-256-GCM and mounted
# as tmpfs (memory-only). Volumes provide persistent storage with node
# affinity.
#
# Features demonstrated:
# - Secret creation and mounting
# - Volume creation and mounting
# - Secrets as environment variables (future)
# - Read-only and read-write mounts
# - Volume affinity (local driver)
#
# Deploy with:
#   warren apply -f examples/secrets-volumes.yaml

---
# Database password secret
apiVersion: v1
kind: Secret
metadata:
  name: db-password
spec:
  type: Opaque
  # Data is base64-encoded (warren CLI handles encoding)
  data: cGFzc3dvcmQxMjM=  # "password123" in base64

---
# API key secret
apiVersion: v1
kind: Secret
metadata:
  name: api-key
spec:
  type: Opaque
  data: c2stbGl2ZV94eHh4eHh4eHh4  # "sk-live-xxxxxxxx" in base64

---
# TLS certificate secret (for application, not ingress)
apiVersion: v1
kind: Secret
metadata:
  name: app-tls
spec:
  type: TLS
  # TLS secrets contain both cert and key
  data: |
    -----BEGIN CERTIFICATE-----
    MIIDXTCCAkWgAwIBAgIJAKZ...
    -----END CERTIFICATE-----
    -----BEGIN PRIVATE KEY-----
    MIIEvQIBADANBgkqhkiG9w...
    -----END PRIVATE KEY-----

---
# PostgreSQL data volume
apiVersion: v1
kind: Volume
metadata:
  name: postgres-data
spec:
  driver: local
  # Local driver options
  driverOpts:
    type: none
    device: /var/lib/warren/volumes/postgres-data
    o: bind

---
# Application logs volume
apiVersion: v1
kind: Volume
metadata:
  name: app-logs
spec:
  driver: local
  driverOpts:
    type: none
    device: /var/lib/warren/volumes/app-logs
    o: bind

---
# PostgreSQL database with secrets and volumes
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  image: postgres:15
  replicas: 1
  mode: replicated

  ports:
    - containerPort: 5432
      hostPort: 5432
      protocol: tcp

  # Secrets mounted as files
  secrets:
    - db-password

  # Volumes for persistent storage
  volumes:
    - source: postgres-data
      target: /var/lib/postgresql/data
      readOnly: false

  env:
    # Secret will be available at /run/secrets/db-password
    # Application reads it at runtime
    - name: POSTGRES_PASSWORD_FILE
      value: /run/secrets/db-password
    - name: POSTGRES_DB
      value: myapp

  resources:
    limits:
      cpuShares: 2048
      memoryBytes: 2147483648  # 2GB

  stopTimeout: 30  # Allow graceful shutdown

  healthCheck:
    type: tcp
    endpoint: localhost:5432
    interval: 30s
    timeout: 5s
    retries: 3
    startPeriod: 30s

---
# Application service with multiple secrets and volumes
apiVersion: v1
kind: Service
metadata:
  name: app
spec:
  image: my-app:latest
  replicas: 2
  mode: replicated

  ports:
    - containerPort: 8080
      protocol: tcp

  # Multiple secrets
  secrets:
    - db-password
    - api-key
    - app-tls

  # Multiple volumes
  volumes:
    # Application logs (read-write)
    - source: app-logs
      target: /var/log/app
      readOnly: false

  env:
    # Database connection using secret
    - name: DATABASE_URL
      value: postgresql://myapp@postgres:5432/myapp
    - name: DATABASE_PASSWORD_FILE
      value: /run/secrets/db-password

    # API configuration using secret
    - name: API_KEY_FILE
      value: /run/secrets/api-key

    # TLS configuration using secret
    - name: TLS_CERT_FILE
      value: /run/secrets/app-tls

    # Log configuration using volume
    - name: LOG_DIR
      value: /var/log/app

  resources:
    limits:
      cpuShares: 1024
      memoryBytes: 1073741824  # 1GB

  healthCheck:
    type: http
    endpoint: http://localhost:8080/health
    interval: 30s
    timeout: 5s
    retries: 3
    startPeriod: 10s

# Secret Behavior:
#
# 1. Secret Creation:
#    - Data encrypted with AES-256-GCM
#    - Stored in BoltDB (Raft replicated)
#    - Encryption key derived from cluster ID
#
# 2. Secret Distribution:
#    - Worker fetches encrypted secret from manager
#    - Worker decrypts using cluster key
#    - Data kept in memory only
#
# 3. Secret Mounting:
#    - Mounted as tmpfs at /run/secrets/<secret-name>
#    - tmpfs is memory-only (no disk write)
#    - Permissions: 0400 (read-only by owner)
#    - Owner: container user
#
# 4. Secret Access:
#    - Application reads /run/secrets/<secret-name>
#    - Can be single file (Opaque) or multiple files (TLS)
#    - Content is plain text (decrypted)
#
# 5. Secret Cleanup:
#    - tmpfs unmounted when container stops
#    - Memory automatically cleared
#    - No disk cleanup needed

# Volume Behavior:
#
# 1. Volume Creation:
#    - Local driver creates directory on node
#    - Default path: /var/lib/warren/volumes/<volume-name>
#    - Can specify custom path in driverOpts
#
# 2. Volume Affinity:
#    - Local volumes tied to specific node
#    - Tasks using volume scheduled to same node
#    - Prevents data loss from node migration
#
# 3. Volume Mounting:
#    - Bind mount from host to container
#    - Path: <host-path> -> <container-path>
#    - Read-only or read-write
#    - Survives container restarts
#
# 4. Volume Lifecycle:
#    - Persists across task restarts
#    - Manual deletion only (warren volume delete)
#    - Data retained even if service deleted

# Secret Management Commands:
#
#   # Create secret from stdin
#   echo -n "password123" | warren secret create db-password -
#
#   # Create secret from file
#   warren secret create api-key --from-file=./api-key.txt
#
#   # List secrets (data not shown)
#   warren secret list
#
#   # Inspect secret metadata
#   warren secret inspect db-password
#
#   # Delete secret (fails if in use)
#   warren secret delete db-password

# Volume Management Commands:
#
#   # Create volume
#   warren volume create postgres-data --driver local
#
#   # List volumes
#   warren volume list
#
#   # Inspect volume
#   warren volume inspect postgres-data
#
#   # Delete volume (fails if in use)
#   warren volume delete postgres-data

# Best Practices:
#
# Secrets:
# 1. Never commit secrets to version control
# 2. Use different secrets per environment
# 3. Rotate secrets regularly
# 4. Use TLS type for certificate secrets
# 5. Limit secret access to necessary services
# 6. Use *_FILE pattern for secrets (not env vars)
#
# Volumes:
# 1. Use volumes for all persistent data
# 2. Backup volume data regularly
# 3. Monitor volume disk usage
# 4. Use read-only mounts when possible
# 5. Consider volume size when placing tasks
# 6. Document volume contents and purpose

# Security Notes:
#
# Secrets:
# - Never exposed in logs or API responses
# - Encrypted at rest (BoltDB)
# - Encrypted in transit (gRPC)
# - Mounted as tmpfs (memory-only)
# - Cleared on unmount (automatic)
#
# Volumes:
# - Not encrypted by Warren (use disk encryption)
# - Access controlled by container user
# - Can contain sensitive data (backups!)
# - Persists across upgrades
# - Manual deletion required

# Migration Notes:
#
# From Docker Swarm:
# - Swarm secrets: Compatible (use same names)
# - Swarm volumes: Compatible (use same driver)
# - Config objects: Use secrets instead
#
# From Kubernetes:
# - K8s secrets: Compatible (convert to warren secrets)
# - K8s configMaps: Use secrets or environment variables
# - K8s PVCs: Use warren volumes
