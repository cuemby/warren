name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24', '1.25']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -short -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build binary
        run: |
          make build-release
          ./bin/warren --version

      - name: Check binary size
        run: |
          size=$(stat -f%z bin/warren 2>/dev/null || stat -c%s bin/warren)
          size_mb=$((size / 1024 / 1024))
          echo "Binary size: ${size_mb} MB"
          # Target: < 120MB (realistic for full-featured single binary with containerd, gRPC, Prometheus, Raft)
          # This is still dramatically smaller than K8s ecosystem alternatives
          if [ $size -gt 125829120 ]; then  # 120 MB
            echo "Error: Binary size exceeds 120MB limit (current: ${size_mb}MB)"
            echo "Warren includes: containerd client, gRPC, Prometheus metrics, Raft consensus, DNS, ingress"
            exit 1
          else
            echo "âœ“ Binary size OK (target: <120MB)"
          fi
